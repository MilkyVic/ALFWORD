#!/usr/bin/env python

import os
import sys
import json
import glob
import random
import argparse
from os.path import join as pjoin

import textworld
from textworld.agents import HumanAgent

import gym
import textworld.gym

from alfworld.info import ALFWORLD_DATA
import alfworld.gen
from alfworld.agents.utils.misc import Demangler, get_templated_task_desc, clean_alfred_facts, add_task_to_grammar


class AlfredDemangler(textworld.core.Wrapper):

    def _clean_alfred_facts(self, facts):
        # def _clean_fact(fact: textworld.logic.Proposition):
        #     args = [textworld.logic.Variable(self.demangler.demangle_alfred_name(arg.name), arg.type) for arg in fact.arguments]
        #     return textworld.logic.Proposition(fact.name, args)

        def _clean_fact_simple(fact: textworld.logic.Proposition):
            args = [self.demangler.demangle_alfred_name(arg.name) for arg in fact.arguments]
            return (fact.name, *args)

        # facts = [_clean_fact(fact) for fact in facts if not fact.name.startswith("new-axiom@")]
        facts = [_clean_fact_simple(fact) for fact in facts if not fact.name.startswith("new-axiom@")]
        return facts

    def load(self, *args, **kwargs):
        super().load(*args, **kwargs)

        self.demangler = Demangler(game_infos=self._game.infos)
        for info in self._game.infos.values():
            info.name = self.demangler.demangle_alfred_name(info.id)

    def step(self, command: str):
        result = super().step(command)

        if self.infos.facts:
            self.state["facts"] = self._clean_alfred_facts(self.state["_facts"])

        if "goal" in self.infos.extras:
            self.state["extra.goal"] = self.goal_conditions

        return result

    def reset(self):
        result = super().reset()

        if self.infos.facts:
            self.state["facts"] = self._clean_alfred_facts(self.state["_facts"])

        if "goal" in self.infos.extras:
            task = self._game_progression.state.task
            for axiom in task.axioms:
                if axiom.name == task.goal.predicate:
                    break
            else:
                axiom = None

            assert axiom is not None, "Should never happen in ALFWorld."
            assert not axiom.condition.has_disjunction(), "Should never happen in ALFWorld."

            self.goal_conditions = [(atom.predicate, *atom.args) for atom in axiom.condition.parts]
            self.state["extra.goal"] = self.goal_conditions

        return result


def main(args):
    print(f"Playing '{args.problem}'.")
    GAME_LOGIC = {
        "pddl_domain": open(args.domain).read(),
        "grammar": open(args.grammar).read(),
    }

    # load state and trajectory files
    pddl_file = os.path.join(args.problem, 'initial_state.pddl')
    json_file = os.path.join(args.problem, 'traj_data.json')
    with open(json_file, 'r') as f:
        traj_data = json.load(f)
    GAME_LOGIC['grammar'] = add_task_to_grammar(GAME_LOGIC['grammar'], traj_data)

    # dump game file
    gamedata = dict(**GAME_LOGIC, pddl_problem=open(pddl_file).read())
    gamefile = os.path.join(os.path.dirname(pddl_file), 'game.tw-pddl')
    json.dump(gamedata, open(gamefile, "w"))

    # register a new Gym environment.
    infos = textworld.EnvInfos(won=True, admissible_commands=True, facts=True, extras=["goal"])
    env_id = textworld.gym.register_game(gamefile, infos,
                                         max_episode_steps=1000000,
                                         wrappers=[AlfredDemangler])

    # reset env
    env = gym.make(env_id)
    obs, infos = env.reset()

    # human agent
    agent = HumanAgent(True)
    agent.reset(env)

    while True:
        print(obs)
        cmd = agent.act(infos, 0, False)

        if cmd == "ipdb":
            from ipdb import set_trace; set_trace()
            continue

        obs, score, done, infos = env.step(cmd)

        if done:
            print("You won!")
            break


if __name__ == "__main__":
    description = "Play the abstract text version of an ALFRED environment."
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("problem", nargs="?", default=None,
                        help="Path to a folder containing PDDL and traj_data files."
                             f"Default: pick one at random found in {ALFWORLD_DATA}")
    parser.add_argument("--domain",
                        default=pjoin(ALFWORLD_DATA, "logic", "alfred.pddl"),
                        help="Path to a PDDL file describing the domain."
                             " Default: `%(default)s`.")
    parser.add_argument("--grammar",
                        default=pjoin(ALFWORLD_DATA, "logic", "alfred.twl2"),
                        help="Path to a TWL2 file defining the grammar used to generated text feedbacks."
                             " Default: `%(default)s`.")
    args = parser.parse_args()

    if args.problem is None:
        problems = glob.glob(pjoin(ALFWORLD_DATA, "**", "initial_state.pddl"), recursive=True)
        args.problem = os.path.dirname(random.choice(problems))

    main(args)
